#!/bin/bash
#
# MCC - My Container Cluster
# https://github.com/dealfonso/my_container_cluster
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

MCC_ETC_FOLDER=/etc/mcc
# File in which is stored specific for the global system
MCC_ETC_CONFIG="${MCC_ETC_FOLDER}/mcc.conf"
# File in which is stored the user specific configuration
MCC_ETC_USER="${HOME}/.mcc/mcc.conf"
# Specific configuration in current folder
MCC_ETC_CURRENT="./mcc.conf"

[ -e "$MCC_ETC_CONFIG" ] && source "$MCC_ETC_CONFIG"
[ -e "$MCC_ETC_USER" ] && source "$MCC_ETC_USER"
[ -e "$MCC_ETC_CURRENT" ] && source "$MCC_ETC_CURRENT"

MCC_FOLDER=${MCC_FOLDER:-$(dirname $0)}

source $MCC_FOLDER/includes

function check_dependencies() {
    # We need jq installed
    jq --version > /dev/null 2> /dev/null
    if (($?!=0)); then
        p_error "jq is not properly installed"
        return 1
    fi

    # Now check the version of LXD (at least, version 2)
    local LXC
    LXC=$(lxc --version 2> /dev/null)
    if (($?!=0)); then
        p_error "lxd is not properly installed"
        return 2
    fi
    local MAJOR REST
    IFS='.' read MAJOR REST <<< "$LXC"
    if ((MAJOR<2)); then
        p_error "this only works if lxc version is greater or equal to 2"
        return 3
    fi

    lxc network list > /dev/null 2>/dev/null
    if (($?!=0)); then
        p_error "lxd needs a version in which the command lxc network works. Perhaps you should install the latest stable in the ppa repository (try apt install -t xenial-backports lxd lxd-client)"
        return 4
    fi
    
    echo | column > /dev/null 2>/dev/null
    if (($?!=0)); then
        p_error "you need to install the column application (in bsdmainutils ubuntu package)"
        return 5
    fi

    # Finally check the CURL command (the CURL command points to the lxd endpoint)
    $CURL_CMD > /dev/null 2> /dev/null
    if (($?!=0)); then
        p_error "could not contact to the lxd server using curl (needs curl version 7.45 or later)"
        return 6
    fi
    return 0
}

# Parse the parameters and split the single - parameters into several ones (i.e. -ab -> -a -b)
n=0
while (( $# > 0 )); do
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" ]; then
        for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
            ARR[$n]="$f"
            n=$(($n+1))
        done
    else
        ARR[$n]="$1"
        n=$(($n+1))
    fi
    shift
done

UNDO=True
VERBOSE=False
QUIET=False
_HELP__set_description "MCC - My Container Cluster - Automating the creation of container based clusters"
DESC="This is a tool that helps to create classic computing clusters whose nodes are \
containers. When creating a cluster, the tool creates a network that will be used by the front-end and the working nodes. \
Then it launches a front-end that includes several tools to add the working nodes. Later you can add some working nodes to \
the cluster, and their names will be properly managed by the front-end (i.e. node1, node2, node3...).

All the containers can be contextualized by including a folder of scripts that must be ran when they are started. That folder \
contains scripts that will be executed in the 'ls' order (i.e. the same mechanism used to execute the scripts in /etc/init.d folder)."

# Add the basic help
_HELP__add_help_cmd "--help|-h" "shows this help and exits"
_HELP__add_help_cmd "--no-undo|-N" "does not try to undo the commands"
_HELP__add_help_cmd "--verbose|-V" "display debug messages"
_HELP__add_help_cmd "--quiet|-q" "supresses most of messages"
_HELP__add_help_cmd "--version|-v" "shows the version number"
_HELP__add_help_cmd "list" "lists the clusters that are running"
_HELP__add_help_cmd "addnode" "adds nodes to one cluster"
_HELP__add_help_cmd "create" "creates one cluster"
_HELP__add_help_cmd "delete" "deletes one cluster"
_HELP__add_help_cmd "enter" "enter in a running cluster"
_HELP__add_help_cmd "delnode" "deletes nodes from the cluster"

# Parse the commandline
n=0
COMMAND=
while [ $n -lt ${#ARR[@]} -a "$COMMAND" == "" ]; do
    PARAM="${ARR[$n]}"
    case "$PARAM" in
        delnode|enter|list|addnode|create|delete) COMMAND="$PARAM";;
        --quiet | -q) QUIET=True;;
        --no-undo | -N) UNDO=False;;
        --verbose | -V) VERBOSE=True;;
        --version | -v) echo "$VERSION" && exit 0;;
        --help | -h) _HELP__usage "" "$DESC" && exit 0;;
        *) _HELP__usage "" "$DESC" && exit 1;;
    esac
    n=$(($n+1))
done

# If the dependencies are not met, we will exit
check_dependencies || exit -1

# Finally execute the proper command
if [ "$COMMAND" != "" ]; then
    $COMMAND "${ARR[@]:$n}"
    if [ $? -ne 0 ]; then
        if [ "$UNDO" == "True" ]; then
            _UNDO__execute
        fi
    fi
else
    echo "no command issued" && _HELP__usage "" && exit 1
fi