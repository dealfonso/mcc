#!/bin/bash
function nodename_valid() {
    local N_NAME=$1

    if [ "${N_NAME:0:4}" != "mlc-" ]; then
        return 1
    fi

    if [[ "$N_NAME" =~ ^mlc-[a-f0-9]*-node[0-9]*$ ]]; then
        return 0
    fi
    return 1
}

function clustername_from_nodename() {
    local N_NAME=$1

    if [ "${N_NAME:0:4}" != "mlc-" ]; then
        return 1
    fi

    if [[ "$N_NAME" =~ ^mlc-[a-f0-9]*$ ]]; then
        echo "$N_NAME"
        return 0
    fi

    if [[ "$N_NAME" =~ ^mlc-[a-f0-9]*-node[0-9]*$ ]]; then
        echo "${N_NAME%-node*}"
        return 0
    fi
    return 1
}

function get_cluster_network_name() {
    # This function gets the name of a existing container that is part of a cluster and gets the
    #   name of the network to which it should be connected (according to its name)
    local C_NAME=

    C_NAME=$(clustername_from_nodename "$1")
    if (($?!=0)); then
        p_error "$1 is not a valid node name"
        return 1
    fi

    echo "nw-${C_NAME:4}"
    return 0 
}

function get_node_ip() {
    local C_NAME=$1

    local NETWORKNAME
    output_to_var_or_fail NETWORKNAME "could not obtain the name of the network for node $C_NAME" get_cluster_network_name "$C_NAME" || return 1

    local DEVICE
    output_to_var_or_fail DEVICE "could not find a device for network $NETWORKNAME in container $C_NAME" \
        eval "$CURL_CMD/1.0/containers/$C_NAME -XGET | jq  '.metadata.config.\"volatile.$NETWORKNAME.name\"' | tr -d '\"'" || return 2

    if [ "$DEVICE" == "null" ]; then
        p_error "unexpectedly node $C_NAME is not attached to network $NETWORKNAME"
        return 3
    fi

    local IP_ADDR
    output_to_var_or_fail IP_ADDR "failed to obtain the IP address for device $DEVICE from container $C_NAME" \
        eval "$CURL_CMD/1.0/containers/$C_NAME/state -XGET | jq '.metadata.network[\"$DEVICE\"].addresses[] | select(.\"family\"==\"inet\") | .address'" ||
            return 4

    echo "$IP_ADDR" | tr -d '"'
    return 0    
}

function wait_node_ip_address() {
    local C_NAME=$1
    local C_IP

    C_IP=$(retry_while 5 "" get_node_ip "$C_NAME")
    if (( $? != 0 )); then
        p_error "could not get IP address for container $C_NAME"
        return 1
    fi
    
    echo "$C_IP"
    return 0
}

function ensure_network_exists() {
    local NETWORKNAME=$1
    local CREATENETWORK=$2

    if [ "$NETWORKNAME" == "" ]; then
        p_error "network name is blank"
        return 3
    fi

    $CURL_CMD/1.0/networks/$NETWORKNAME -XGET > /dev/null 2> /dev/null

    if (( $? == 0 )); then
        p_debug "network $NETWORKNAME exists"
        return 0
    else
        if [ "$CREATENETWORK" != "True" ]; then
            p_error "network $NETWORKNAME does not exist"
            return 1
        else
            p_info "creating network $NETWORKNAME"
            ERR=$(execute_command lxc network create "$NETWORKNAME" 2>&1)
            RESULT=$?

            if [ $? -ne 0 ]; then
                p_error "failed to create network $NETWORKNAME ($ERR)"
                return 2
            fi 
            add_undo_cmdline lxc network delete "$NETWORKNAME"
            return 0
        fi
    fi
}

function get_networks_for_container() {
    local C_NAME=$1

    if [ "$C_NAME" == "" ]; then
        p_error "container name is blank"
        return 1
    fi

    local C_DATA
    C_DATA="$($CURL_CMD/1.0/containers/$C_NAME -XGET 2> /dev/null)"
    if (( $? != 0 )); then
        p_error "could not get information about container"
        return 2
    fi

    echo "$C_DATA" | jq '.metadata.devices[] | select(."type"=="nic") | ."parent"' | tr -d '"'
    return 0
}