#!/bin/bash
#
# MCC - My Container Cluster
# https://github.com/dealfonso/my_container_cluster
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function _CLUSTER__exists() {
    #
    # $ Usage: _CLUSTER__exists <clustername>
    #
    # Returns whether the cluster exists in the system or not

    local CLUSTERNAME=$1

    # Get the list of clusters
    local CLUSTERS
    output_to_var_or_fail CLUSTERS "could not get the list of clusters cluster does not exist" _CLUSTER__get_list || return 2

    # Now get only those names that match the substring of the name that we are searching
    local CLUSTERS_FILTERED=$(echo "$CLUSTERS" | grep "$CLUSTERNAME" | tr -d ' ')
    while read C_NAME; do
        if [ "$C_NAME" == "$CLUSTERNAME" ]; then
            return 0;
        fi
    done <<< "$CLUSTERS"

    # If not matched, the cluster does not exist
    p_error "the cluster '$CLUSTERNAME' does not exist"
    return 1
}

function _CLUSTER__get_list() {
    #
    # $ Usage: _CLUSTER__get_list
    #
    # Gets the list of clusters

    local CONTAINER_STR
    output_to_var_or_fail CONTAINER_STR "could not get the list of containers" _MCC__get_container_list ||
        return 1

    # Only those containers that have the form mcc-<name> are the frontends. If they have a "-node" at the end, they are not clusters themselves
    local CNAME CNAME_C
    while read CNAME; do
        CNAME_C="${CNAME%-node*}"
        if [ "$CNAME_C" == "$CNAME" ]; then
            echo "$CNAME"
        fi
    done <<< "$CONTAINER_STR"
    return 0
}

function _CLUSTER__get_nodes() {
    #
    # $ Usage: _CLUSTER__get_nodes <clustername>
    #
    # Returns the nodes that belong to a cluster (according to the naming scheme)

    local CLUSTERNAME="$1"

    # Get the list of containers
    local CONTAINER_STR
    output_to_var_or_fail CONTAINER_STR "could not get the list of containers" _MCC__get_container_list ||
        return 1

    # Only those that have the form CLUSTERNAME-nodeXXX are nodes from the cluster
    local CNAME CNAME_C
    while read CNAME; do
        if [[ "$CNAME" =~ ^$CLUSTERNAME-node[0-9]*$ ]]; then
            echo "$CNAME"
        fi
    done <<< "$CONTAINER_STR"
    return 0
}

function _CLUSTER__get_info() {
    #
    # $ Usage: _CLUSTER__get_info <clustername>
    #
    # Returns the information about one cluster

    local CLUSTERNAME="$1"

    local NODES=
    output_to_var_or_fail NODES "could not get the list of nodes from the cluster $CLUSTERNAME" _CLUSTER__get_nodes "$CLUSTERNAME" || 
        return 1

    local NETWORKS
    output_to_var_or_fail NETWORKS "could not obtain the networks associated to $CLUSTERNAME" _CONTAINER__get_networks "$CLUSTERNAME" || 
        return 2

    local IPS
    local C_NETWORK=$(_NAMING__get_cluster_network_name $CLUSTERNAME)
    output_to_var_or_fail IPS "could obtain the ip addresses associated to $CLUSTERNAME" _NETWORK__get_node_ip "$CLUSTERNAME" "$C_NETWORK" || 
        return 3
    
    echo "$CLUSTERNAME;$NETWORKS;$IPS;$NODES"
    return 0
}