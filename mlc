#!/bin/bash
source includes

function check_dependencies() {
    # We need jq installed
    jq --version > /dev/null 2> /dev/null
    if (($?!=0)); then
        p_error "jq is not properly installed"
        return 1
    fi

    # Now check the version of LXD (at least, version 2)
    local LXC
    LXC=$(lxc --version 2> /dev/null)
    if (($?!=0)); then
        p_error "lxd is not properly installed"
        return 2
    fi
    local MAJOR REST
    IFS='.' read MAJOR REST <<< "$LXC"
    if ((MAJOR<2)); then
        p_error "this only works if lxc version is greater or equal to 2"
        return 3
    fi

    # Finally check the CURL command (the CURL command points to the lxd endpoint)
    $CURL_CMD > /dev/null 2> /dev/null
    if (($?!=0)); then
        p_error "could not contact to the lxd server using curl (needs curl version 7.45 or later)"
        return 4
    fi
    return 0
}

# Parse the parameters and split the single - parameters into several ones (i.e. -ab -> -a -b)
n=0
while (( $# > 0 )); do
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" ]; then
        for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
            ARR[$n]="$f"
            n=$(($n+1))
        done
    else
        ARR[$n]="$1"
        n=$(($n+1))
    fi
    shift
done

# Add the basic help
_HELP__add_help_cmd "list" "lists the clusters that are running"
_HELP__add_help_cmd "addnode" "adds nodes to one cluster"
_HELP__add_help_cmd "create" "creates one cluster"
_HELP__add_help_cmd "delete" "deletes one cluster"
_HELP__add_help_cmd "enter" "enter in a running cluster"
_HELP__add_help_cmd "delnode" "deletes nodes from the cluster"

# Parse the commandline
n=0
COMMAND=
while [ $n -lt ${#ARR[@]} -a "$COMMAND" == "" ]; do
    PARAM="${ARR[$n]}"
    case "$PARAM" in
        delnode|enter|list|addnode|create|delete) COMMAND="$PARAM";;
        --help | -h) _HELP__usage "" && exit 0;;
        *) usage && exit 1;;
    esac
    n=$(($n+1))
done

# If the dependencies are not met, we will exit
check_dependencies || exit -1

# Finally execute the proper command
if [ "$COMMAND" != "" ]; then
    $COMMAND "${ARR[@]:$n}"
    if [ $? -ne 0 ]; then
        echo "trying to undo the commands executed"
        # _UNDO__execute
    fi
else
    echo "no command issued" && _HELP__usage "" && exit 1
fi