#!/bin/bash
function get_nodeid_from_nodename() {
    local NODENAME=$1

    nodename_valid "$NODENAME" || return 1

    echo "${NODENAME#mlc-*-}"
    return 0
}

function generate_new_node_id() {
    # This function generates a name for a new node in the cluster. It will fail if the cluster does not exist or
    #   if it cannot allocate a new node name (probably because the maximum amount of nodes has been reached)
    local CLUSTERNAME=$1
    local NODES
    output_to_var_or_fail NODES "could not get the nodes from cluster $CLUSTERNAME" get_nodes_of_cluster "$CLUSTERNAME" ||
        return 1

    # We will simply generate names and check if they are used or not
    local NODENAME i
    for ((i=1;i<$MAXNODES;i++)); do
        NODENAME="$CLUSTERNAME-node$i"
        if [ "$(echo "$NODES" | grep "$NODENAME")" == "" ]; then
            break
        fi
    done

    # If the maximum amount of nodes has been reached, we will fail
    if (( i >= MAXNODES )); then
        p_error "could not allocate a name for a new node (there are at least $MAXNODES nodes!)"
        return 2
    fi

    # Output the name of the node
    echo "node$i"
    return 0
}

function addnode() {
    local CLUSTERNAME=
    local NODECOUNT=1
    local WNIMAGE=ubuntu:
    local CONTEXTFOLDER

    reset_help
    add_help_cmd "--node-count|-n <number>" "number of nodes to be added"
    add_help_cmd "--working-node-image|-f <image>" "image to be used for the container"
    add_help_cmd "--help|-h" "shows this help and exists"
    add_help_cmd "<cluster name>" "name of the cluster to which the node is going to be added to"
    while (( $# > 0 )); do
        case "$1" in
            --node-count|-n)    NODECOUNT=$2
                                shift;;

            --working-node-image|-f)    WNIMAGE=$2
                                        shift;;

            --context-folder|-c)        CONTEXTFOLDER=$2
                                        shift;;

            --help|-h)          usage addnode && exit 0;;

            *)  if [ "$CLUSTERNAME" == "" ]; then 
                    CLUSTERNAME=$(ensure_valid_clustername $1)
                else
                    usage addnode && exit 1
                fi;;
        esac
        shift
    done

    # If the cluster does not exist, fail
    cluster_exists "$CLUSTERNAME" || return 1

    # Will get the network name because we need it to launch the node
    local NETWORKNAME
    NETWORKNAME=$(get_cluster_network_name "$CLUSTERNAME")

    # Now we will get the IP address for the frontend
    p_debug "getting ip address for cluster $CLUSTERNAME in network $NETWORKNAME"
    local C_IP
    output_to_var_or_fail C_IP "could not get IP address of cluster $CLUSTERNAME" get_node_ip "$CLUSTERNAME" ||
        return 3
    p_debug "ip for cluster $CLUSTERNAME is $C_IP"

    # We simply repeat the same method for all the nodes
    local i
    for ((i=0;i<NODECOUNT;i++)); do

        # We need a name for the new node
        p_debug "creating a new name for the working node"
        local NODEID
        local NODENAME
        output_to_var_or_fail NODEID "could not allocate a name for the new node" generate_new_node_id "$CLUSTERNAME" ||
            return 4

        NODENAME="$CLUSTERNAME-$NODEID"
        p_debug "using node name $NODENAME"

        # Finally we will launch the container
        if ! launch_container "$NODENAME" "$WNIMAGE" "$NETWORKNAME"; then
            p_error "failed to launch node $NODENAME ($?)"
            return 5
        fi

        # If the container has been launched, we will wait for its IP address
        local N_IP
        p_debug "waiting for container to have IP address"
        output_to_var_or_fail N_IP -- wait_node_ip_address "$NODENAME" || 
            return 6
        
        p_debug "node has $N_IP IP address"

        # And now we will contextualize the container
        prepare_context "$NODENAME"
        if [ "$CONTEXTFOLDER" != "" ]; then
            p_debug "contextualization of $NODENAME"
            stage_in_folder "$NODENAME" "$CONTEXTFOLDER" "$MLC_CONTEXT_SCRIPTS_REMOTE_FOLDER"
        fi

        # And contextualize it
        if execute_context "$NODENAME"; then
            p_debug "contextualization of $NODENAME suceeded"
        else
            p_error "failed to contextualize $NODENAME"
        fi

        # Finally we MUST add the node to the front-end    
        if ! execute_in_container "$CLUSTERNAME" "$MLC_REMOTE_FOLDER/$MLC_SCRIPT_ADDNODE" "$NODENAME" "$N_IP" "${NODEID}" "${NODENAME}" "${NODEID}.${CLUSTERNAME}"; then
            p_error "failed to add the node to the cluster"
            return 1
        fi

        p_out "node $NODENAME successfully added to the cluster"
    done
    
    return 0
}
