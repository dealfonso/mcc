#!/bin/bash
#
# MCC - My Container Cluster
# https://github.com/dealfonso/my_container_cluster
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function generate_new_node_id() {
    # This function generates a name for a new node in the cluster. It will fail if the cluster does not exist or
    #   if it cannot allocate a new node name (probably because the maximum amount of nodes has been reached)
    local CLUSTERNAME=$1
    local NODES
    output_to_var_or_fail NODES "could not get the nodes from cluster $CLUSTERNAME" _CLUSTER__get_nodes "$CLUSTERNAME" ||
        return 1

    # We will simply generate names and check if they are used or not
    local NODENAME i
    for ((i=1;i<$MAXNODES;i++)); do
        NODENAME="$CLUSTERNAME-node$i"
        if ! element_in_list "$NODENAME" "$NODES"; then
            break
        fi
    done

    # If the maximum amount of nodes has been reached, we will fail
    if (( i >= MAXNODES )); then
        p_error "could not allocate a name for a new node (there are at least $MAXNODES nodes!)"
        return 2
    fi

    # Output the name of the node
    echo "node$i"
    return 0
}

function addnode() {
    local CLUSTERNAME=
    local NODECOUNT=1
    local WNIMAGE=local:alpine
    local CONTEXTFOLDER
    local ENTER=False
    local DEVICES=

    _HELP__reset_help
    _HELP__append_description "Adds one or more nodes to a cluster. The script add-node is invoked in the cluster, once the container has been launched and it has an IP address."
    _HELP__add_help_cmd "<cluster name>" "name of the cluster to which the node is going to be added to"
    _HELP__add_help_cmd "--working-node-image|-w <image>" "image to be used for the container"
    _HELP__add_help_cmd "--context-folder|-c" "folder that contains the scripts to be executed on contextualization in the working node"
    _HELP__add_help_cmd "--device|-d" "adds a device to the container ($(_DEVICE__get_available))"
    _HELP__add_help_cmd "--node-count|-n <number>" "number of nodes to be added"
    _HELP__add_help_cmd "--enter-cluster|-e" "enters in the cluster once added the last host"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"
    while (( $# > 0 )); do
        case "$1" in
            --enter-cluster|-e) ENTER=True;;
            --node-count|-n)    NODECOUNT=$2
                                shift;;

            --working-node-image|-w)    WNIMAGE=$2
                                        shift;;

            --context-folder|-c)        CONTEXTFOLDER=$2
                                        shift;;

            --device|-d)        DEVICES="$DEVICES$2;"
                                shift;;

            --help|-h)          _HELP__usage addnode && exit 0;;

            *)  if [ "$CLUSTERNAME" == "" ]; then 
                    CLUSTERNAME="$1"
                else
                    _HELP__usage addnode && exit 1
                fi;;
        esac
        shift
    done

    # Ensure that we have a valid name for the cluster
    CLUSTERNAME="$(_NAMING__ensure_valid_clustername "$CLUSTERNAME")" || return 1

    # If the cluster does not exist, fail
    _CLUSTER__exists "$CLUSTERNAME" || return 2

    # Will get the network name because we need it to launch the node
    local NETWORKNAME
    NETWORKNAME=$(_NAMING__get_cluster_network_name "$CLUSTERNAME")

    # Now we will get the IP address for the frontend
    p_debug "getting ip address for cluster $CLUSTERNAME in network $NETWORKNAME"
    local C_IP
    output_to_var_or_fail C_IP "could not get IP address of cluster $CLUSTERNAME" _MCC__get_node_ip "$CLUSTERNAME" ||
        return 3
    p_debug "ip for cluster $CLUSTERNAME is $C_IP"

    # We simply repeat the same method for all the nodes
    local i
    for ((i=0;i<NODECOUNT;i++)); do

        # We need a name for the new node
        p_debug "creating a new name for the working node"
        local NODEID
        local NODENAME
        output_to_var_or_fail NODEID "could not allocate a name for the new node" generate_new_node_id "$CLUSTERNAME" ||
            return 4

        NODENAME="$CLUSTERNAME-$NODEID"
        p_debug "using node name $NODENAME"

        p_debug "preparing devices" 
        _MCC__devices_prepare "$NODENAME" "$DEVICES" || return 4

        # Finally we will launch the container
        if ! _MCC__launch_container "$NODENAME" "$WNIMAGE" "$CONTEXTFOLDER"; then
            p_error "failed to launch node $NODENAME ($?)"
            return 5
        fi

        p_debug "connecting devices"
        _MCC__devices_connect "$NODENAME" "$DEVICES" || return 4

        local N_IP
        output_to_var_or_fail N_IP "unexpectedly could not get the IP address again" _MCC__get_node_ip "$NODENAME" || return 6

        local PUBKEY
        output_to_var_or_fail PUBKEY "could not get the public key" _CONTAINER__execute "$CLUSTERNAME" cat "/root/.ssh/id_rsa.pub" || return 7
        _CONTAINER__execute "$NODENAME" sh -c "mkdir -p ~/.ssh
echo \"$PUBKEY\" > ~/.ssh/authorized_keys"

        # Finally we MUST add the node to the front-end    
        if ! _CONTAINER__execute "$CLUSTERNAME" "$MCC_REMOTE_FOLDER/$MCC_SCRIPT_ADDNODE" "$NODENAME" "$N_IP" "${NODEID}" "${NODENAME}" "${NODEID}.${CLUSTERNAME}"; then
            p_error "failed to add the node to the cluster"
            return 1
        fi

        if ! _CONTAINER__execute "$NODENAME" "$MCC_REMOTE_FOLDER/$MCC_SCRIPT_ADDNODE" "$NODENAME" "$C_IP" "${CLUSTERNAME}" "node0" "frontend"; then
            p_error "failed to add cluster ip to the node"
            return 1
        fi

        p_out "node $NODENAME successfully added to the cluster"
    done

    if [ "$ENTER" == "True" ]; then
        enter "$CLUSTERNAME"
    fi
    
    return 0
}
