#!/bin/bash
#
# MCC - My Container Cluster
# https://github.com/dealfonso/my_container_cluster
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function create() {
    local NODECOUNT=0
    local FRONTENDIMAGE=local:alpine
    local WNIMAGE
    local CLUSTERNAME
    local NETWORKNAME
    local ENTERCLUSTER
    local CONTEXTFOLDER
    local DELETE
    local DEVICES
    local CONTEXTFOLDERWN
    local VARLIST
    local TMPFOLDER

    _HELP__reset_help
    _HELP__append_description "Creates a cluster, and also creates a dedicated network that will be used to connect the nodes from the cluster. \
The image specified using the --front-end-image is used to create the front-end. If specified, this command will execute a '$0 addnode' to add \
the corresponding number of working nodes."
    _HELP__add_help_cmd "<name>" "name of the cluster (default: auto generated name). The name of the cluster MUST follow the format mcc-<name>. If it is not respected, mcc- will be prepended"
    _HELP__add_help_cmd "--front-end-image|-f <image>" "name of the image to be used for the front-end (default: $FRONTENDIMAGE)"
    _HELP__add_help_cmd "--working-node-image|-w <image>" "name of the image to be used for the working nodes (default: the same than frontend)"
    _HELP__add_help_cmd "--context-folder|-c" "folder that contains the scripts to be executed on contextualization (the folder should contain a contextnode.d folder whose content will be executed"
    _HELP__add_help_cmd "--context-folder-wn|-C" "folder that contains the scripts to be executed on contextualization in the working node (if -n is set to greater than 0)"
    _HELP__add_help_cmd "--nodes|-n" "Amount of nodes to automatically deploy on front-end boot (at the end, this is a call to $0 addnode)"
    _HELP__add_help_cmd "--device|-d" "adds a device to the container ($(_DEVICE__get_available))"
    _HELP__add_help_cmd "--enter-cluster|-e" "enters in the cluster, in an interactive session, if it is successfully created"
    _HELP__add_help_cmd "--delete-on-exit|-D" "deletes the cluster when exiting the interactive session (implies -e)"
    _HELP__add_help_cmd "--help|-h" "shows this help and exists"

    while (( $# > 0 )); do
        case "$1" in
            --front-end-image|-f)   FRONTENDIMAGE=$2
                                    shift;;

            --working-node-image|-w)   WNIMAGE=$2
                                    shift;;

            --context-folder|-c)        CONTEXTFOLDER="$2"
                                        shift;;

            --context-folder-wn|-C)        CONTEXTFOLDERWN="$2"
                                                shift;;

            --nodes|-n)             NODECOUNT=$2
                                    shift;;

            --device|-d)        DEVICES="$DEVICES$2;"
                                shift;;

            --enter-cluster|-e)     ENTERCLUSTER=True;;

            --delete-on-exit|-D)    ENTERCLUSTER=True    
                                    DELETE=True;;
            --help|-h)          _HELP__usage create && exit 0;;
            *)  if [ "$CLUSTERNAME" == "" ]; then 
                    CLUSTERNAME="$1"
                else
                    _HELP__usage addnode && exit 1
                fi;;
        esac
        shift
    done

    # First we will check if the folder provided for contextualization is valid
    ensure_valid_folder "$CONTEXTFOLDER" || return 1

    # If a name for the cluster is not provided, we will generate a new one
    if [ "$CLUSTERNAME" == "" ]; then
        CLUSTERNAME=$(_NAMING__generate_cluster_name)
    fi
    
    CLUSTERNAME="$(_NAMING__ensure_valid_clustername "$CLUSTERNAME")"
    NETWORKNAME="$(_NAMING__get_cluster_network_name "$CLUSTERNAME")"

    # If the cluster exists, fail
    if _CLUSTER__exists "$CLUSTERNAME"; then
        p_error "cluster $CLUSTERNAME already exists"
        return 2
    fi

    # Correct the name of the wn node image
    if [ "$WNIMAGE" == "" ]; then
        WNIMAGE="$FRONTENDIMAGE"
    fi

    p_debug "preparing devices" 
    _MCC__devices_prepare "$CLUSTERNAME" "$DEVICES" || return 4

    # Launch the container that represents the frontend    
    _MCC__launch_container "$CLUSTERNAME" "$FRONTENDIMAGE" "$MCC_FRONTEND_CONTEXT" "$CONTEXTFOLDER" || return 3

    # We have managed to launch the cluster!
    p_out "$CLUSTERNAME successfully created"

    # Now we will create a file in which the variables used to create the cluster are stored
    p_debug "generating config file" 
    VARLIST="FRONTENDIMAGE WNIMAGE CONTEXTFOLDER CONTEXTFOLDERWN NODECOUNT DEVICES ENTERCLUSTER DELETE"
    TMPFOLDER=$(create_temp_folder)
    for VARNAME in $VARLIST; do
        echo "$VARNAME=\"${!VARNAME}\""
    done > "$TMPFOLDER/${MCC_VARFILES}"

    # Now we will upload the variables file to the container
    if ! _CONTAINER__upload_file "$CLUSTERNAME" "$TMPFOLDER/${MCC_VARFILES}" "${MCC_ETC_REMOTE_FOLDER}"; then
        p_error "could not upload the variables file"
        return 1
    fi
    rm -f "$TMPFOLDER/${MCC_VARFILES}" 2> /dev/null > /dev/null
    if (($?!=0)); then
        p_warning "file $TMPFOLDER/${MCC_VARFILES} could not be deleted and contains the information about the cluster" 
    fi

    p_debug "connecting devices"
    _MCC__devices_connect "$CLUSTERNAME" "$DEVICES" || return 4

    # Try to automatically launch the working nodes
    if ((NODECOUNT>0)); then
        p_info "trying to deploy $NODECOUNT nodes using image $WNIMAGE"
        if ! addnode "$CLUSTERNAME" -n $NODECOUNT -w "$WNIMAGE" -c "$CONTEXTFOLDERWN" -d "$DEVICES"; then
            p_error "failed to add the nodes"
            return 7
        fi
    fi

    # An extra function is to automatically enter into the cluster
    if [ "$ENTERCLUSTER" == "True" ]; then
        if ! enter "$CLUSTERNAME"; then
            p_error "could not enter the cluster"
            return 4
        fi
    fi

    # if the user has requested to delete the cluster, invoke the function to delete it
    if [ "$DELETE" == "True" ]; then
        if ! delete "$CLUSTERNAME"; then
            p_error "failed to delete the cluster $CLUSTERNAME" 
            return 5
        fi
        p_debug "cluster $CLUSTERNAME successfully deleted"
    fi

    return 0
}