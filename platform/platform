#!/bin/bash
# MCC_FOLDER=/home/calfonso/Programacion/git/my_lxd_cluster/
# source ../includes

SHAREDFOLDER_PATH=/tmp/mcc

# DEVICES:
# - SHARED folder
#   * for the case that we had a platform with several hosts in which the containers could be
#     hosted, the shared folder could be a folder that is shared using NFS and that is mounted
#     in the virtualization hosts. Then preparing the shared folder will consist of creating the
#     folder and we could connect the device.
#   * a more complex case will be to create the shared folder in a NFS Server, updating the /etc/exports
#     file, reexporting and mounting on the flight and then the shared folder will be available.
#     At this time I cannot see any advantage on using this approach (which is complex) instead
#     of the previous one (which is simple).
#   * an even more complex case will involve connecting a iscsi end-point, which would be mounted
#     in a server that will share the filesystem using NFS, etc. And we could use one of the two
#     previous approaches.
#
# - HOME
#   * is a special case of the shared folder
#
# - TODO:
#   * sysfolder (a folder that already exists in the host is exposed to the container)
#       > at this time, a shared folder is (in part) a sysfolder which is mounted using NFS and 
#         where it is created a folder
#   * sysfile (a file that already exists in the host is exposed to the container)
#   * gpu (a gpu that can be connected to the container)
#   * network (other networks than the "cluster one")

function _DEVICE__get_available() {
    echo "$(typeset -F | grep _DEVICE__ | grep _prepare | awk '{print $3}' | sed 's/_DEVICE__\(.*\)_prepare/\1/g' | tr '\n' ' ' | sed 's/[[:blank:]]*$//')"
}

function _DEVICE__sharedfolder_prepare() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"

    # We are going to create a folder for the cluster
    local CLUSTERNAME=$(_NAMING__clustername_from_nodename "$C_NAME")
    mkdir -p "$SHAREDFOLDER_PATH/$CLUSTERNAME/$D_ID"
    chmod +x "$SHAREDFOLDER_PATH/$CLUSTERNAME/$D_ID"
}

function _DEVICE__sharedfolder_connect() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"

    # We are going to add the device to the container in the proper folder
    local CLUSTERNAME=$(_NAMING__clustername_from_nodename "$C_NAME")
    lxc config device add "$C_NAME" "$D_ID" disk path="/$D_ID" source="$SHAREDFOLDER_PATH/$CLUSTERNAME/$D_ID"
}

function _DEVICE__sharedfolder_disconnect() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"

    # Remove the device from the container
    lxc config device remove "$C_NAME" "$D_ID"
}

function _DEVICE__sharedfolder_dispose() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"

    # We could delete the shared folder in case that there are not any container using it
    # - that can be translated into the fact that the cluster does not exist
    local CLUSTERNAME=$(_NAMING__clustername_from_nodename "$C_NAME")

    if ! _CLUSTER__exists "$CLUSTERNAME"; then
        p_debug "There are not any container using the folder $D_ID so we are removing it"
        rm -rf "$SHAREDFOLDER_PATH/$CLUSTERNAME/$D_ID"
    fi
    return 0
}

function _DEVICE__home_prepare() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"
    _DEVICE__sharedfolder_prepare "$C_NAME" "/home"
}
function _DEVICE__home_connect() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"
    _DEVICE__sharedfolder_connect "$C_NAME" "/home"
}
function _DEVICE__home_disconnect() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"
    _DEVICE__sharedfolder_disconnect "$C_NAME" "/home"
}
function _DEVICE__home_dispose() {
    local C_NAME D_ID D_INFO
    read C_NAME D_ID D_INFO <<< "$@"
    _DEVICE__sharedfolder_dispose "$C_NAME" "/home"
}

function _MCC__get_node_ip() {
    # $ Usage: _MCC__get_node_ip
    # 
    # Returns the IP of the node in the network of the cluster
    local C_NAME=$1
    local C_NETWORK=$(_NAMING__get_cluster_network_name "$C_NAME")

    local C_IP
    output_to_var_or_fail C_IP "" _NETWORK__get_node_ip "$C_NAME" "$C_NETWORK" || return 1

    echo "$C_IP"
    return 0
}

function _MCC__get_container_list() {
    # $ Usage: _MCC__get_container_list
    # 
    # Returns the list of containers in the platform (those that start by our CONTAINER_PREFIX)
    _CONTAINER__get_list "${CONTAINER_PREFIX}.*"
}

function _MCC__wait_ip_address() {
    #
    # $ Usage: _MCC__wait_ip_address <container>
    #
    # Waits for the container to have an IP address in the network of the cluster. It retries 10 times
    local C_NAME=$1
    local C_NETWORK=$(_NAMING__get_cluster_network_name $C_NAME)
    local C_IP

    # * cannot use output_to_var_or_fail because of the blank parameters
    C_IP=$(retry_while 10 1 "" _NETWORK__get_node_ip "$C_NAME" "$C_NETWORK")
    if (($?!=0)); then
        p_error "could not get IP address for container $C_NAME"
        return 1
    fi
    echo "$C_IP"
    return 0
}

function _MCC__launch_container() {
    #
    # $ Usage: _MCC__launch_container <container> <image> <context folder> <context folder> ... -- <local folder> <remote folder> ...
    #
    local C_NAME=$1
    local IMAGENAME=$2
    # local CONTEXTFOLDER=$3
    shift
    shift
    # shift

    local NETWORKNAME
    NETWORKNAME="$(_NAMING__get_cluster_network_name "$C_NAME")"

    # Finally we will launch the container
    if ! _CONTAINER__launch "$C_NAME" "$IMAGENAME" "$NETWORKNAME"; then
        p_error "failed to launch frontend $C_NAME"
        return 1
    fi

    # If the container has been launched, we will wait for its IP address
    p_debug "waiting for container to have IP address"
    output_to_var_or_fail IP -- _MCC__wait_ip_address "$C_NAME" || return 2

    p_debug "container $C_NAME has IP address $IP"

    # For contextualization, we first upload the contextualization files
    exec_or_fail "failed to upload contextualization files " _CONTAINER__upload_folder_content "$C_NAME" "${MCC_LOCAL_FOLDER}" "$MCC_REMOTE_FOLDER" || 
        return 3

    local CONTEXTFOLDER
    while [ $# -gt 0 -a "$1" != "--" ]; do
        CONTEXTFOLDER="$1"
        # The upload the contextualization scripts folder (if provided)
        if [ "$CONTEXTFOLDER" != "" ]; then
            p_debug "uploading the files in folder $CONTEXTFOLDER to folder $MCC_CONTEXT_SCRIPTS_REMOTE_FOLDER"
            exec_or_fail "failed to upload folder $CONTEXTFOLDER" _CONTAINER__upload_folder_content "$C_NAME" "${CONTEXTFOLDER}" "$MCC_CONTEXT_SCRIPTS_REMOTE_FOLDER" ||
                return 4
        fi
        shift
    done
    shift

    # Finally, the arbitrary folders
    local L_FOLDER
    local R_FOLDER
    while (($#>0)); do
        L_FOLDER="$1"
        R_FOLDER="$2"
        if [ "$L_FOLDER" != "" -a "$R_FOLDER" != "" ]; then
            p_debug "uploading $L_FOLDER to $R_FOLDER in container $C_NAME"
            if ! _CONTAINER__upload_folder_content "$C_NAME" "$L_FOLDER" "$R_FOLDER"; then
                p_error "failed to upload folder $L_FOLDER"
            fi
        fi
        shift
        shift
    done

    # And we are ready to launch the contextualization script
    p_debug "executing the contextualization script ${MCC_REMOTE_FOLDER}/$MCC_SCRIPT_CONTEXT in $C_NAME"
    if ! _CONTAINER__execute "$C_NAME" "${MCC_REMOTE_FOLDER}/$MCC_SCRIPT_CONTEXT"; then
        p_error "contextualization returned an error"
        return 5
    fi

    return 0
}

function _CONTAINER__execute() {
    # $ Usage: _CONTAINER__execute <container> <commandline>
    # 
    # Executes the <commandline> inside the <container>
    local C_NAME=$1
    shift

    lxc exec $C_NAME -- "$@"
    return $?
}

function _CONTAINER__get_list() {
    #
    # $ Usage: _CONTAINER__get_list <prefix>
    #
    local FILTER="$1"
    if [ "$FILTER" == "" ]; then
        FILTER='.*'
    fi

    # Get the list of containers
    local CONTAINER_STR=$($CURL_CMD/1.0/containers -XGET | jq ".metadata[]" | tr -d '"')
    if [ $? -ne 0 ]; then
        return 1
    fi

    # Check one by one which of the containers accomplish the filter
    local CNAME
    while read CNAME; do
        CNAME="${CNAME:16}"
        if [[ "${CNAME:0:4}" =~ ^${FILTER}$ ]]; then
            echo "$CNAME"
        fi
    done <<< "$CONTAINER_STR"
    return 0
}

function _CONTAINER__exists() {
    # 
    # $ Usage: _CONTAINER__exists <name>
    #
    # Checks whether the container exists or not
    #
    local C_NAME=$1

    if [ "$C_NAME" == "" ]; then
        p_error "container name is blank"
        return 1
    fi

    # If we can get the information from the API, the container exists
    $CURL_CMD/1.0/containers/$C_NAME -XGET > /dev/null 2> /dev/null
    if (( $? == 0 )); then
        return 0
    fi

    return 1
}

function _CONTAINER__get_networks() {
    # 
    # $ Usage: _CONTAINER__get_networks <container>
    #
    # Get the list of networks to which the container is attached
    local C_NAME=$1

    if [ "$C_NAME" == "" ]; then
        p_error "container name is blank"
        return 1
    fi

    # Get the information of the container
    local C_DATA
    C_DATA="$($CURL_CMD/1.0/containers/$C_NAME -XGET 2> /dev/null)"
    if (( $? != 0 )); then
        p_error "could not get information about container"
        return 2
    fi

    # Return the names of the networks
    echo "$C_DATA" | jq '.metadata.devices[] | select(."type"=="nic") | ."parent"' | tr -d '"'
    return 0
}

function _CONTAINER__stop() {
    #
    # $ Usage: _CONTAINER__stop <name>
    #
    # Stops a container
    local C_NAME=$1

    if ! _CONTAINER__exists "$C_NAME"; then
        p_error "container $C_NAME does not exist"
        return 1
    fi

    local ERR
    local RESULT
    RESULT=$(execute_command lxc stop "$C_NAME" 2>&1)
    ERR=$?
    if (( ERR == 0 )); then
        p_debug "container successfully stopped"
    else
        p_error "failed to stop container ($RESULT)"
    fi
    return $ERR
}

function _CONTAINER__launch() {
    #
    # $ Usage: _CONTAINER__launch <name> <image> <network>
    #
    # Starts a container with name <name>, using the <image> and connects it to the <network>
    local C_NAME=$1
    local C_IMAGE=$2
    local C_NETWORK=$3

    p_info "creating host $C_NAME using image $C_IMAGE in network $C_NETWORK"

    _CONTAINER__exists "$C_NAME" && return 1
    _NETWORK__ensure_exists "$C_NETWORK" "True" || return 2
    _CONTAINER__ensure_image_exists "$C_IMAGE" || return 3

    execute_command lxc launch -n "$C_NETWORK" -e $C_IMAGE "$C_NAME" > /dev/null
    if (( $? == 0 )); then
        p_debug "container $C_NAME successfully launched"
        # As we are using ephemeral containers, we do not need to delete them
        _UNDO__add_undo_cmdline lxc stop "$C_NAME"
        return 0
    else
        return 4
    fi
}

function _NETWORK__exists() {
    #
    # $ Usage: _NETWORK__exists <network name>
    #
    # Checks whether a network exists or not
    local NETWORKNAME="$1"
    
    var_empty NETWORKNAME "network name is blank" && return 1

    # If we can get the information about the network, it exists
    $CURL_CMD/1.0/networks/$NETWORKNAME -XGET > /dev/null 2> /dev/null
    if (($?==0)); then
        p_debug "network $NETWORKNAME exists"
        return 0
    else
        return 1
    fi
}

function _NETWORK__create() {
    #
    # $ Usage: _NETWORK__create <network name>
    #
    # Creates a network
    local NETWORKNAME="$1"
    
    var_empty NETWORKNAME "network name is blank" && return 1
    if _NETWORK__exists "$NETWORKNAME"; then
        p_debug "network $NETWORKNAME already exists"
        return 0
    fi

    # Create the network
    p_info "creating network $NETWORKNAME"

    local ERR
    ERR=$(execute_command lxc network create "$NETWORKNAME" 2>&1)
    if (($?!=0)); then
        p_error "failed to create network $NETWORKNAME ($ERR)"
        return 1
    fi 

    _UNDO__add_undo_cmdline lxc network delete "$NETWORKNAME"
    return 0
}

function _NETWORK__delete() {
    #
    # $ Usage: _NETWORK__delete <network name>
    #
    # Deletes the network
    local NETWORKNAME="$1"
    
    var_empty NETWORKNAME "network name is blank" && return 1

    if ! _NETWORK__exists "$NETWORKNAME"; then
        p_debug "network $NETWORKNAME does not exists"
        return 0
    fi

    # Create the network
    p_info "creating network $NETWORKNAME"

    local ERR
    ERR=$(execute_command lxc network delete "$NETWORKNAME" 2>&1)
    if (($?!=0)); then
        p_error "failed to delete network $NETWORKNAME ($ERR)"
        return 1
    fi 

    return 0
}

function _NETWORK_get_tenants() {
    #
    # $ Usage: _NETWORK_get_tenants <network name>
    #
    # Gets the number of tenants that are connected to a network
    local NETWORKNAME="$1"
    
    var_empty NETWORKNAME "network name is blank" && return 1

    local COUNT
    COUNT=$($CURL_CMD/1.0/networks/$NETWORKNAME -XGET | jq '.metadata.used_by | length' 2> /dev/null)
    if (($? == 0)); then
        echo "$COUNT"
        return 0
    else
        return 1
    fi
}

function _NETWORK__ensure_exists() {
    #
    # $ Usage: _NETWORK__ensure_exists <network name> <create if not not exists>
    #
    # Checks whether the network exists or not. If it does not exist, it will be automatically created if <create if not exists> is True.
    local NETWORKNAME="$1"
    local CREATENETWORK="$2"

    if [ "$NETWORKNAME" == "" ]; then
        p_error "network name is blank"
        return 1
    fi

    # If we can get the information about the network, it exists
    $CURL_CMD/1.0/networks/$NETWORKNAME -XGET > /dev/null 2> /dev/null
    if (($?==0)); then
        p_debug "network $NETWORKNAME exists"
        return 0
    else

        # If not, check whether we have to create it or not
        if [ "$CREATENETWORK" != "True" ]; then
            p_error "network $NETWORKNAME does not exist"
            return 2
        else

            # Create the network
            p_info "creating network $NETWORKNAME"

            local ERR
            ERR=$(execute_command lxc network create "$NETWORKNAME" 2>&1)
            if (($?!=0)); then
                p_error "failed to create network $NETWORKNAME ($ERR)"
                return 3
            fi 

            _UNDO__add_undo_cmdline lxc network delete "$NETWORKNAME"
            return 0
        fi
    fi
}

function _CONTAINER__upload_folder_content() {
    #
    # $ Usage: _CONTAINER__upload_folder_content <container name> <local folder> <folder in container>
    #
    # Uploads the content of a folder to the <folder in container>
    # * the folder (along with the intermediate folders) in the container is created if it did not existed before
    local C_NAME="$1"
    local L_FOLDER="$2"
    local R_FOLDER="$3"

    if [ -d "$L_FOLDER" ]; then
        # Have to create the folder before because even using -p if the first folder of a path does not exist, lxc file push will fail
        lxc exec "$C_NAME" -- mkdir -p "$R_FOLDER" > /dev/null
        lxc file push -p "$L_FOLDER/"* "$C_NAME/$R_FOLDER/" > /dev/null
        if (($? != 0)); then
            return 2
        fi
        return 0
    fi
    return 1
}

function _CONTAINER__upload_file() {
    #
    # $ Usage: _CONTAINER__upload_file <container name> <local file> <folder in container>
    #
    # Uploads the file to the <folder in container>
    # * the folder (along with the intermediate folders) in the container is created if it did not existed before
    local C_NAME="$1"
    local L_FILE="$2"
    local R_FOLDER="$3"

    if [ -f "$L_FILE" ]; then
        # Have to create the folder before because even using -p if the first folder of a path does not exist, lxc file push will fail
        lxc exec "$C_NAME" -- mkdir -p "$R_FOLDER" > /dev/null
        lxc file push -p "$L_FILE" "$C_NAME/$R_FOLDER/" > /dev/null
        if (($? != 0)); then
            return 2
        fi
        return 0
    fi
    return 1
}

function _CONTAINER__ensure_image_exists() {
    #
    # Usage: _CONTAINER__ensure_image_exists <image>
    #
    # Checks whether the image exists or not
    local IMAGENAME=$1

    if [ "$IMAGENAME" == "" ]; then
        p_error "image name is blank"
        return 2
    fi

    execute_command lxc image show $IMAGENAME > /dev/null 2> /dev/null
    if (($?!=0)); then
        p_error "image $IMAGENAME does not exist"
        return 1
    else
        p_debug "image $IMAGENAME is available"
        return 0
    fi
}

function _NETWORK__get_node_ip() {
    # This functions get the ip in a network, for a container (if it is connected)
    local C_NAME=$1
    local N_NAME=$2

    # First we check which device is connected to that network
    local DEVICE
    output_to_var_or_fail DEVICE "could not find a device for network $N_NAME in container $C_NAME" \
        eval "$CURL_CMD/1.0/containers/$C_NAME -XGET | jq  '.metadata.config.\"volatile.$N_NAME.name\"' | tr -d '\"'" || return 1

    if [ "$DEVICE" == "null" ]; then
        p_error "unexpectedly node $C_NAME is not attached to network $N_NAME"
        return 2
    fi

    # Then we check which is the IP address of that device
    local IP_ADDR
    output_to_var_or_fail IP_ADDR "failed to obtain the IP address for device $DEVICE from container $C_NAME" \
        eval "$CURL_CMD/1.0/containers/$C_NAME/state -XGET | jq '.metadata.network[\"$DEVICE\"].addresses[] | select(.\"family\"==\"inet\") | .address'" ||
            return 3

    # Finally, show the IP address
    echo "$IP_ADDR" | tr -d '"'
    return 0    
}